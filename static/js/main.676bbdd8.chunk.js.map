{"version":3,"sources":["ImageGalleryItem.js","ImageGallery.js","SearchBar.js","Spinner.js","Modal.js","Button.js","App.js","index.js"],"names":["ImageGalleryItem","id","webformatURL","largeImageURL","query","onClick","className","src","alt","source","width","ImageGallery","images","map","SearchBar","state","inputValue","handleChange","e","value","target","setState","handleSubmit","preventDefault","props","onSubmit","this","type","autoComplete","autoFocus","placeholder","onChange","Component","Spinner","color","height","Modal","handleKeyDown","code","onClose","window","addEventListener","removeEventListener","children","Button","APIkey","App","page","loading","largeImageUrl","getLargeURL","url","closeModal","fetchImages","fetch","then","response","json","data","hits","prevState","catch","err","console","log","finally","handleFormSubmit","text","prevProps","prevQuery","nextQuery","preImgArr","currentImgArr","length","scrollTo","top","document","documentElement","scrollHeight","behavior","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.676bbdd8.chunk.js","sourcesContent":["import React  from 'react';\r\nimport './ImageItem.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function ImageGalleryItem({id,webformatURL,largeImageURL, query, onClick}){\r\n  return (\r\n  <li className=\"ImageGalleryItem\" key={id}>\r\n    <img src={webformatURL} alt={query}\r\n    className=\"ImageGalleryItem-image\"\r\n    source = {largeImageURL}\r\n    onClick={onClick}\r\n    width=\"300\" />\r\n  </li> )\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  id: PropTypes.number,\r\n  webformatURL: PropTypes.string.isRequired,\r\n  largeImageURL: PropTypes.string,\r\n  query:PropTypes.string,\r\n  onClick:PropTypes.func.isRequired\r\n};","import React  from 'react';\r\nimport ImageGalleryItem from './ImageGalleryItem';\r\nimport './ImageGallery.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function ImageGallery({images, onClick,query}){\r\n  return (\r\n  <ul className=\"ImageGallery\">\r\n    {images.map(({id,webformatURL,largeImageURL})=>(\r\n      <ImageGalleryItem key={id} webformatURL={webformatURL}\r\n      source = {largeImageURL} alt={query}\r\n      onClick={()=>onClick(largeImageURL)}/>))}\r\n  </ul>)\r\n}\r\n\r\n// ImageGallery.propTypes = {\r\n//   images: PropTypes.arrayOf(\r\n//     PropTypes.exact({\r\n//      id:PropTypes.number,\r\n//      webformatURL: PropTypes.string,\r\n//      largeImageURL: PropTypes.string\r\n//   })).isRequired,\r\n//   onClick: PropTypes.func.isRequired,\r\n//   query:PropTypes.string\r\n//  };\r\n","import React, {Component} from 'react';\r\nimport './SearchBar.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default class SearchBar extends Component{\r\n  state={\r\n    inputValue: \"\"\r\n  }\r\n\r\n  handleChange=e=>{\r\n    const{value} = e.target;\r\n    this.setState({inputValue: value})\r\n  };\r\n\r\n  handleSubmit=e=>{\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.inputValue);\r\n    this.setState({inputValue: \"\"})\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n      <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n            onChange={this.handleChange}\r\n            value={this.state.inputValue}\r\n          />\r\n      </form>\r\n</header>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n  SearchBar.propTypes = {\r\n    onSubmit:PropTypes.func.isRequired,\r\n  };","import React  from 'react';\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport './Spinner.css';\r\n\r\nexport default function Spinner(){\r\n  return (\r\n    <div className = \"Spinner\">\r\n      <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />\r\n    </div>\r\n  )\r\n}","import React, { Component } from 'react';\r\nimport './Modal.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default class Modal extends Component{\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  handleKeyDown = e => {\r\n    if (e.code === 'Escape') {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"Overlay\">\r\n        <div className=\"Modal\">\r\n          {this.props.children}\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n\r\n}\r\n\r\nModal.propTypes = {\r\n  onClose:PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired\r\n};","import React from 'react';\r\nimport './Button.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Button({onClick}){\r\n  return (\r\n  <button type=\"button\" onClick={onClick} className=\"Button\">Load more</button>\r\n  )\r\n}\r\n\r\nButton.propTypes = {\r\n  onClick:PropTypes.func.isRequired\r\n};","import React, {Component} from 'react';\nimport ImageGallery from './ImageGallery';\nimport SearchBar from './SearchBar';\nimport Spinner from './Spinner';\nimport Modal from './Modal.js';\nimport Button from './Button.js';\n\nimport './App.css';\n\nconst APIkey ='18551464-3b975953e71b3254d8a945600';\n\nexport default class App extends Component{\n\n  state={\n    images:[],\n    query:\"\",\n    page: 1,\n    loading: false,\n    largeImageUrl: null\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    const prevQuery = prevState.query;\n    const nextQuery = this.state.query;\n\n    const preImgArr = prevState.images;\n    const currentImgArr = this.state.images;\n\n    if(prevQuery !== nextQuery) this.fetchImages(nextQuery);\n\n    if(preImgArr.length < currentImgArr.length) {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  getLargeURL = url=>{\n    this.setState({largeImageUrl:url})\n  };\n\n  closeModal =()=>{\n    this.setState({largeImageUrl:null})\n  }\n\n  fetchImages=()=>{\n    const {query,page} = this.state;\n\n    this.setState({loading: true});\n\n    fetch(`https://pixabay.com/api/?q=${query}&page=${page}&key=${APIkey}&image_type=photo&orientation=horizontal&per_page=12`)\n    .then(response=>response.json())\n    .then(data=>data.hits)\n    .then(images => {\n      this.setState(prevState=>({images: [...prevState.images,...images],\n        page: prevState.page+1}));\n    })\n    .catch(err=>console.log(err))\n    .finally(()=>this.setState({loading:false}))\n  };\n\n  handleFormSubmit=text=>{\n    this.setState({query:text, images:[],page:1})\n  };\n\n  render(){\n    const {query,images,loading, largeImageUrl} = this.state;\n    return (\n      <div>\n        <SearchBar onSubmit = {this.handleFormSubmit}/>\n\n        {images.length > 0 && (<ImageGallery images={images} alt={query} onClick={this.getLargeURL}/>)}\n\n        {loading && <Spinner/>}\n\n        {images.length >0 && (\n          <Button onClick={this.fetchImages}/>\n        )}\n\n        {largeImageUrl && (\n          <Modal onClose={this.closeModal}>\n            <img src={largeImageUrl} alt=\"large\"/>\n          </Modal>)}\n\n      </div>\n    )\n  }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}